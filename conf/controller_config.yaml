# Controller configuration with multiple workers
controller:
  log_level: INFO # Log level for the controller itself
  offline: false # Whether to run in offline mode (no WiFi management)
  wifi:
    connect:
      ssid: "veil" # Optional: SSID to connect to before starting workers
      password: "" # Optional: Password for the SSID
    reconnect: true # Optional: Whether to reconnect to previous SSID after workers finish

video:
  source: "udp://@0.0.0.0:11111" # Tello video stream
  log_level: WARNING # Show frame acquisition info
  profile_window: 1.0 # Show max task time over last second
  depends_on: ["detector", "drone"] # Wait for detector and drone to start

detector:
  model: yolov5nu # Base model path without extension
  backend: tensorrt # Use ONNX for cross-platform compatibility
  frame_skip: 1 # Process every frame
  log_level: WARNING # Show frame processing info
  profile_window: 2.0 # Show max task time over last 2 seconds
  depends_on: [] # No dependencies
  events:
    - video: frame # Receive frame events from video

navigator:
  target_class: "person" # Track people (class name)
  log_level: WARNING
  profile_window: 1.5 # Show max task time over last 1.5 seconds
  depends_on: ["detector"] # Wait for detector to start
  events:
    - detector: detection # Receive detection events from detector

drone:
  offline: false # Whether to run in offline mode (no WiFi management)
  ip: "192.168.10.1" # Default Tello IP address
  max_speed: 100 # Maximum speed in cm/s
  follow_distance: 100 # Distance to maintain from target in cm
  movement_threshold: 0.1 # In normalized coordinates [-1, 1]
  log_level: DEBUG
  profile_window: 1.0 # Show max task time over last second
  depends_on: ["navigator"] # Wait for navigator to start
  events:
    - navigator: target # Receive target events from navigator

ui:
  log_level: WARNING # Show frame display info
  profile_window: 1.0 # Show max task time over last second
  depends_on: [] # No dependencies, can start anytime
  events:
    - video: frame # Receive frame events from video
    - detector: detection # Receive detection events from detector
    - video: worker_profile # Receive profiling data from video worker
    - detector: worker_profile # Receive profiling data from detector worker
    - navigator: worker_profile # Receive profiling data from navigator worker
    - ui: worker_profile # Receive profiling data from UI worker
